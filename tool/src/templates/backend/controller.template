package controllers

import (
  "api/db"
	"api/models"
	"github.com/astaxie/beego"
	"encoding/json"
	_ "gopkg.in/mgo.v2"
	"fmt"
)

// Operaciones Crud {{entity.name}}
type {{entity.name}}Controller struct {
	beego.Controller
}

// @Title GetAll
// @Description get all objects
// @Success 200 {{entity.name}} models.{{entity.name}}
// @Failure 403 :objectId is empty
// @router / [get]
func (j *{{entity.name}}Controller) GetAll() {
	session,_ := db.GetSession()
	obs := models.GetAll{{entity.name}}s(session)

  if len(obs) == 0 {
		j.Data["json"] = []string{}
	} else {
		j.Data["json"] = &obs
	}

	j.ServeJSON()
}

// @Title Get
// @Description get {{entity.name}} by nombre
// @Param	nombre		path 	string	true		"El nombre de la {{entity.name}} a consultar"
// @Success 200 {object} models.{{entity.name}}
// @Failure 403 :uid is empty
// @router /:id [get]
func (j *{{entity.name}}Controller) Get() {
	id := j.GetString(":id")
	session, _ := db.GetSession()
	if id != "" {
		{{entity.name|lower}}, err := models.Get{{entity.name}}ById(session,id)
		if err != nil {
			j.Data["json"] = err.Error()
		} else {
			j.Data["json"] = {{entity.name|lower}}
		}
	}
	j.ServeJSON()
}

// @Title Borrar {{entity.name}}
// @Description Borrar {{entity.name}}
// @Param	objectId		path 	string	true		"El ObjectId del objeto que se quiere borrar"
// @Success 200 {string} ok
// @Failure 403 objectId is empty
// @router /:objectId [delete]
func (j *{{entity.name}}Controller) Delete() {
	session,_ := db.GetSession()
	objectId := j.Ctx.Input.Param(":objectId")
	result, _ := models.Delete{{entity.name}}ById(session,objectId)
	j.Data["json"] = result
	j.ServeJSON()
}

// @Title Crear {{entity.name}}
// @Description Crear {{entity.name}}
// @Param	body		body 	models.{{entity.name}}	true		"Body para la creacion de {{entity.name}}"
// @Success 200 {int} {{entity.name}}.Id
// @Failure 403 body is empty
// @router / [post]
func (j *{{entity.name}}Controller) Post() {
	var {{entity.name|lower}} models.{{entity.name}}
	json.Unmarshal(j.Ctx.Input.RequestBody, &{{entity.name|lower}})
	fmt.Println({{entity.name|lower}})
	session,_ := db.GetSession()
	models.Insert{{entity.name}}(session,{{entity.name|lower}})
	j.Data["json"] = "insert success!"
	j.ServeJSON()
}

// @Title Update
// @Description update the {{entity.name}}
// @Param	objectId		path 	string	true		"The objectid you want to update"
// @Param	body		body 	models.Object	true		"The body"
// @Success 200 {object} models.Object
// @Failure 403 :objectId is empty
// @router /:objectId [put]
func (j *{{entity.name}}Controller) Put() {
	objectId := j.Ctx.Input.Param(":objectId")

	var {{entity.name|lower}} models.{{entity.name}}
	json.Unmarshal(j.Ctx.Input.RequestBody, &{{entity.name|lower}})
	session,_ := db.GetSession()

	err := models.Update{{entity.name}}(session, {{entity.name|lower}},objectId)
	if err != nil {
		j.Data["json"] = err.Error()
	} else {
		j.Data["json"] = "update success!"
	}
	j.ServeJSON()
}

// @Title Preflight options
// @Description Crear {{entity.name}}
// @Param	body		body 	models.{{entity.name}}	true		"Body para la creacion de {{entity.name}}"
// @Success 200 {int} {{entity.name}}.Id
// @Failure 403 body is empty
// @router / [options]
func (j *{{entity.name}}Controller) Options() {
	j.Data["json"] = "success!"
	j.ServeJSON()
}

// @Title Preflight options
// @Description Crear {{entity.name}}
// @Param	body		body 	models.{{entity.name}} true		"Body para la creacion de {{entity.name}}"
// @Success 200 {int} {{entity.name}}.Id
// @Failure 403 body is empty
// @router /:objectId [options]
func (j *{{entity.name}}Controller) {{entity.name}}DeleteOptions() {
	j.Data["json"] = "success!"
	j.ServeJSON()
}
